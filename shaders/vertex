const int NUM_LIGHTS = 4;

attribute vec3 aVertexPosition;
attribute vec3 aVertexNormal;
attribute vec4 aVertexColor;

uniform mat4 uMVMatrix;
uniform mat4 uPMatrix;
uniform mat4 uNMatrix;

uniform bool uTranslateLights;
uniform vec3 uLightPosition[NUM_LIGHTS];

varying vec3 vNormal;
varying vec3 vLightRay[NUM_LIGHTS];
varying vec3 vEye[NUM_LIGHTS];

void main(void) {

     vec4 c = aVertexColor;
     vec4 vertex = uMVMatrix * vec4(aVertexPosition, 1.0);
     vNormal = vec3(uNMatrix * vec4(aVertexNormal, 1.0));
     vec4 lightPosition = vec4(0.0);

     if (uTranslateLights){
         for(int i=0; i < NUM_LIGHTS; i++){
           lightPosition =   uMVMatrix * vec4(uLightPosition[i], 1.0);
           vLightRay[i] = vertex.xyz - lightPosition.xyz;
           vEye[i] = -vec3(vertex.xyz);
         }
     }
     else {
        for(int i=0; i < NUM_LIGHTS; i++){
          lightPosition = vec4(uLightPosition[i], 1.0);
          vLightRay[i] = vertex.xyz - lightPosition.xyz;
          vEye[i] = -vec3(vertex.xyz);
        }
    }
    gl_Position = uPMatrix * uMVMatrix * vec4(aVertexPosition, 1.0);
}
